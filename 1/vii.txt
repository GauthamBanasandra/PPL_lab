Before going to linkage types, you have to understand what does a translation unit mean.
A translation unit, is the input of any C compiler, that is your source file after passing the preprocessing step, so that preprocessor macros are expanded, all external libraries and header files are included.

External linkage, means that the variable could be defined somewhere else outside the file you are working on, which means you can define it inside any other translation unit rather your current one (you will have to use the keyword extern when defining it in the other source code).

Internal linkage, means that the variable must be defined in your translation unit scope, which means it should either be defined in any of the included libraries, or in the same file scope.

None linkage, points to the default functions and braces  scopes, such as defining an auto variable inside a function, this will make the variable only accessable within that function's scope.

Note that:
Any global object is externally linked by default, you can disable that by using the keyword static.
Any constant global object is internally linked by default, you can disable that by using the keyword extern.

